_         = require 'lodash'
path      = require 'path'
Q         = require 'q'
Abstract  = require './abstract'

###

options:
  * files   (String|[String]) required
  * cwd     (String)
  * dest    (String) required
  * filter  (function)
  * options
    * bare          (Boolean)   > --bare         > compile without a top-level function wrapper
    * sourcemap     (Boolean)   > --map          > generate source map and save as .js.map files
    * noHeader      (Boolean)   > --no-header    > suppress the "Generated by" header

###
module.exports = class Sass extends Abstract

  onRun: (deferred, srcDestMap, options = {}) =>
    options     = _.defaults options, @getDefaultOptions()
    srcDestObjs = srcDestMap.resolve()
    args        = @prepareArguments(options)

    @_ensureFolders(srcDestObjs, options)

    Q.all(@_execFiles(srcDestObjs, args, options))
    .fail((e) => @_failPromise(deferred, e))
    .done => deferred.resolve()

  getDefaultOptions: =>
    bare:       false
    sourcemap:  true
    noHeader:   true

  prepareArguments: (opts = {}) =>
    args = ["--compile"]
    args.push "--bare"      if opts.bare == true
    args.push "--map"       if opts.sourcemap == true
    args.push "--no-header" if opts.noHeader == true
    args

  _execFiles: (srcDestObjs, args, options) =>
    _.map srcDestObjs, (srcDestObj) =>
      d       = Q.defer()
      src     = srcDestObj.src().pathFromRoot()
      output  = srcDestObj.dest().dirname()
      a       = args.concat(["--output", output, src])

      @naspi.exec.exec d, 'coffee', a, {}

      d.promise

  _ensureFolders: (srcDestObjs, options) =>
    _.each srcDestObjs, (srcDestObj) =>
      @naspi.file.mkdir(srcDestObj.dest().dirname())



_         = require 'lodash'
path      = require 'path'
Q         = require 'q'
Abstract  = require './abstract'

###

options:
  * files   (String|[String]) required
  * cwd     (String)
  * dest    (String) required
  * filter  (function)
  * options
    * bare          (Boolean)   > --bare         > compile without a top-level function wrapper
    * sourcemap     (Boolean)   > --map          > generate source map and save as .js.map files
    * noHeader      (Boolean)   > --no-header    > suppress the "Generated by" header

###
module.exports = class Sass extends Abstract

  onRun: (deferred, options = {}) =>
    options.options = _.defaults (options.options || {}), @getDefaultOptions()
    files           = @filesExpanded(options)
    args            = @prepareArguments(options.options)

    @_ensureFolders(files, options)

    Q.all(@_execFiles(files, args, options)).done(=> deferred.resolve())

  getDefaultOptions: =>
    bare:       false
    sourcemap:  true
    noHeader:   false

  prepareArguments: (opts = {}) =>
    args = ["--compile"]
    args.push "--bare"      if opts.bare == true
    args.push "--map"       if opts.sourcemap == true
    args.push "--no-header" if opts.noHeader == true
    args

  _execFiles: (files, args, options) =>
    _.map files, (file) =>
      d       = Q.defer()
      src     = file.src[0]
      output  = path.dirname(file.dest)
      a       = args.concat(["--output", output, src])

      @naspi.exec.exec 'coffee', a, {}, => d.resolve()

      d.promise

  _ensureFolders: (files, options) =>
    _.each files, (file) => @naspi.file.mkdir(path.dirname(file.dest))



_         = require 'lodash'
path      = require 'path'
Q         = require 'q'
Abstract  = require './abstract'

###

options:
  * files   (String|[String]) required
  * cwd     (String)
  * dest    (String) required
  * filter  (function)
  * options
    * bare          (Boolean)   > --bare         > compile without a top-level function wrapper
    * sourcemap     (Boolean)   > --map          > generate source map and save as .js.map files
    * noHeader      (Boolean)   > --no-header    > suppress the "Generated by" header

###
module.exports = class Sass extends Abstract

  onRun: (deferred, fileMappingList, options = {}) =>
    options       = _.defaults options, @getDefaultOptions()
    fileMappings  = fileMappingList.resolve()
    args          = @prepareArguments(options)

    @_ensureFolders(fileMappings, options)

    Q.all(@_execFiles(fileMappings, args, options))
    .fail((e) => @_failPromise(deferred, e))
    .done => deferred.resolve()

  getDefaultOptions: =>
    bare:       false
    sourcemap:  true
    noHeader:   true

  prepareArguments: (opts = {}) =>
    args = ["--compile"]
    args.push "--bare"      if opts.bare == true
    args.push "--map"       if opts.sourcemap == true
    args.push "--no-header" if opts.noHeader == true
    args


  # ----------------------------------------------------------
  # private - filter

  # @nodoc
  _ensureFolders: (fileMappings, options) =>
    _.each fileMappings, (fileMapping) =>
      @naspi.file.mkdir(fileMapping.dest().getAbsoluteDirname())

  # @nodoc
  _execFiles: (fileMappings, args, options) =>
    _.map fileMappings, (fileMapping) =>
      deferred = Q.defer()

      @_execFile(fileMapping, args, options)
      .then (fileContent) => @_moveFile(fileMapping, args, options, fileContent)
      .fail((e) => @_failPromise(deferred, e))
      .done => deferred.resolve()

      deferred.promise

  # @nodoc
  _execFile: (fileMapping, args, options) =>
    deferred  = Q.defer()
    src       = fileMapping.src().absolutePath()
    a         = args.concat([src])

    @naspi.exec.exec(deferred, 'coffee', a, { pipeOutput: true })

    deferred.promise

  # @nodoc
  _moveFile: (fileMapping, args, options, fileContent) =>
    compiled  = fileMapping.src().absolutePath()
    compiled  = compiled.replace(/\.coffee$/, '.js')
    output    = fileMapping.dest().absolutePath()

    if @naspi.file.exists(compiled)
      @naspi.file.copy compiled, output
      @naspi.file.delete compiled, { force: true }

    if @naspi.file.exists("#{compiled}.map")
      @naspi.file.copy "#{compiled}.map", "#{output}.map"
      @naspi.file.delete "#{compiled}.map", { force: true }
